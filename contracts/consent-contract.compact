pragma language_version >= 0.16 && <= 0.17;

import CompactStandardLibrary;

// Consent states
enum ConsentStatus { NONE, GIVEN, REVOKED }

// LEDGER STATE (on-chain)
export ledger patientConsents: Map<Bytes<20>, ConsentStatus>;
export ledger consentAuthorities: Map<Bytes<20>, Bytes<32>>;
export ledger round: Counter;

// WITNESS (private)
witness patientSecretKey(): Bytes<32>;

// Helper: derive stable authorization key
circuit deriveAuthKey(patientID: Bytes<20>, secret: Bytes<32>): Bytes<32> {
    return persistentHash<Vector<4, Bytes<32>>>([
        pad(32, "consent:authkey"),
        patientID as Field as Bytes<32>,
        round.read() as Field as Bytes<32>,
        secret
    ]);
}

// MAIN FUNCTIONS
export circuit giveConsent(patientID: Bytes<20>): [] {
    // Disclose patientID for ledger operations
    const disclosedPatientID = disclose(patientID);

    // Check consent status
    assert(patientConsents.lookup(disclosedPatientID) != ConsentStatus.GIVEN, "already given");

    // Store who can revoke consent
    const secret_key = patientSecretKey();
    const authKey = disclose(deriveAuthKey(patientID, secret_key));

    consentAuthorities.insert(disclosedPatientID, authKey);
    patientConsents.insert(disclosedPatientID, ConsentStatus.GIVEN);
    round.increment(1);
}

export circuit revokeConsent(patientID: Bytes<20>): [] {
    // Disclose patientID for ledger operations
    const disclosedPatientID = disclose(patientID);

    // Check consent status
    assert(patientConsents.lookup(disclosedPatientID) == ConsentStatus.GIVEN, "no active consent");

    // Prove you are the same person who gave consent
    const secret_key = patientSecretKey();
    const authKey = disclose(deriveAuthKey(patientID, secret_key));

    assert(consentAuthorities.lookup(disclosedPatientID) == authKey, "not authorized to revoke");

    patientConsents.insert(disclosedPatientID, ConsentStatus.REVOKED);
    round.increment(1);
}

export circuit checkConsent(patientID: Bytes<20>) : ConsentStatus {
    // Disclose patientID for ledger operation
    const disclosedPatientID = disclose(patientID);
    return patientConsents.lookup(disclosedPatientID); 
}